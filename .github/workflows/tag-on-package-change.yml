
name: Push Change
on:
  push:

permissions: write-all
  
jobs:
  tag-npm-release:
    name: Tag new npm package releases
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - run: |
          increment_version() {
           local usage=" USAGE: $FUNCNAME [-l] [-t] <version> [<position>] [<leftmost>]
                   -l : remove leading zeros
                   -t : drop trailing zeros
            <version> : The version string.
           <position> : Optional. The position (starting with one) of the number 
                        within <version> to increment.  If the position does not 
                        exist, it will be created.  Defaults to last position.
           <leftmost> : The leftmost position that can be incremented.  If does not
                        exist, position will be created.  This right-padding will
                        occur even to right of <position>, unless passed the -t flag."

           # Get flags.
           local flag_remove_leading_zeros=0
           local flag_drop_trailing_zeros=0
           while [ "${1:0:1}" == "-" ]; do
              if [ "$1" == "--" ]; then shift; break
              elif [ "$1" == "-l" ]; then flag_remove_leading_zeros=1
              elif [ "$1" == "-t" ]; then flag_drop_trailing_zeros=1
              else echo -e "Invalid flag: ${1}\n$usage"; return 1; fi
              shift; done

           # Get arguments.
           if [ ${#@} -lt 1 ]; then echo "$usage"; return 1; fi
           local v="${1}"             # version string
           local targetPos=${2-last}  # target position
           local minPos=${3-${2-0}}   # minimum position

           # Split version string into array using its periods. 
           local IFSbak; IFSbak=IFS; IFS='.' # IFS restored at end of func to                     
           read -ra v <<< "$v"               #  avoid breaking other scripts.

           # Determine target position.
           if [ "${targetPos}" == "last" ]; then 
              if [ "${minPos}" == "last" ]; then minPos=0; fi
              targetPos=$((${#v[@]}>${minPos}?${#v[@]}:$minPos)); fi
           if [[ ! ${targetPos} -gt 0 ]]; then
              echo -e "Invalid position: '$targetPos'\n$usage"; return 1; fi
           (( targetPos--  )) || true # offset to match array index

           # Make sure minPosition exists.
           while [ ${#v[@]} -lt ${minPos} ]; do v+=("0"); done;

           # Increment target position.
           v[$targetPos]=`printf %0${#v[$targetPos]}d $((10#${v[$targetPos]}+1))`;

           # Remove leading zeros, if -l flag passed.
           if [ $flag_remove_leading_zeros == 1 ]; then
              for (( pos=0; $pos<${#v[@]}; pos++ )); do
                 v[$pos]=$((${v[$pos]}*1)); done; fi

           # If targetPosition was not at end of array, reset following positions to
           #   zero (or remove them if -t flag was passed).
           if [[ ${flag_drop_trailing_zeros} -eq "1" ]]; then
                for (( p=$((${#v[@]}-1)); $p>$targetPos; p-- )); do unset v[$p]; done
           else for (( p=$((${#v[@]}-1)); $p>$targetPos; p-- )); do v[$p]=0; done; fi

           echo "${v[*]}"
           IFS=IFSbak
           return 0
          }

          sudo apt-get -qq install -y jq
          git config --global user.email "you@example.com"
          git config --global user.name "Your Name"
          VERSION="$(cat package.json | jq -r '.version')"
          NEW_VERSION=$(increment_version $VERSION)
          echo "Version detected -> $VERSION <- Incrementing to -> $NEW_VERSION"
          
          TAG="$(cat package.json | jq -r '.version')"
          sudo git fetch --tags
          if ! sudo git tag | grep "${TAG}"; then
            sudo git tag -a ${TAG} -m ${TAG}
            sudo git push --follow-tags
          else
            echo "'${TAG}' already exists. No action taken."
          fi
          echo $(jq --arg newval "$NEW_VERSION" '.version |= $newval' package.json) > package.json
          echo $(jq --arg newval "$NEW_VERSION" '.version |= $newval' package-lock.json) > package-lock.json

          git add -A
          git commit -m "performing update"
          git push